from PyQt6.QtWidgets import (QWidget, QGridLayout, QPushButton, QScrollArea, 
                           QVBoxLayout, QFrame, QMessageBox, QSizePolicy, QScrollBar)
from PyQt6.QtCore import pyqtSignal, Qt, QPoint, QPropertyAnimation, QEasingCurve, QRect, QEvent, QTimer
from PyQt6.QtGui import QGuiApplication, QShortcut, QKeySequence
from PyQt6.QtCore import QFileSystemWatcher
import os
import numpy as np
from PIL import Image
import win32gui
import win32api
import win32con
import win32process
import psutil
from pathlib import Path
import win32clipboard
from pynput import keyboard as pynput_keyboard
import time
import pyautogui
import random
import win32gui
import ctypes

import logging
import json

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='chat_executor.log'
)

class ChatExecutor(QWidget):
    button_clicked = pyqtSignal(str, str)
    
    def __init__(self, button_data, parent=None):
        super().__init__(parent)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∫–Ω–∞
        self.setWindowFlags(
            Qt.WindowType.FramelessWindowHint |
            Qt.WindowType.WindowStaysOnTopHint |
            Qt.WindowType.Tool |
            Qt.WindowType.WindowDoesNotAcceptFocus
        )
        
        self.setAttribute(Qt.WidgetAttribute.WA_DeleteOnClose)
        self.setAttribute(Qt.WidgetAttribute.WA_ShowWithoutActivating)
        
        self.watcher = QFileSystemWatcher()
        self.watcher.fileChanged.connect(self.reload_buttons)
        self.button_data = button_data
        self.button_width = 120
        self.button_height = 30
        
        self._parent = parent
        
        self.setMouseTracking(True)
        self.mouse_over = False
        
        self.setup_ui()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —á–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
        self.chat_detection_coords = (0, 0)
        self.chat_detection_color = (0, 0, 0)
        self.chat_color_tolerance = 10
        self.zone_size = 15
        self.min_matches_required = 3
        self.check_step = 3
        
        self.load_chat_detection_settings()
        
        # –¢–∞–π–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
        self.check_timer = QTimer(self)
        self.check_timer.timeout.connect(self.check_chat_conditions)
        self.check_timer.setInterval(1500)
        
        self.cursor_check_timer = QTimer(self)
        self.cursor_check_timer.timeout.connect(self.check_cursor_appearance)
        self.cursor_check_timer.setInterval(300)
        
        self.should_be_visible = False
        self._last_geometry_log = 0
        self._last_debug_log = 0

        self.hotkey_listener = None
        self.setup_qt_hotkeys()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)
        self.setStyleSheet("""
            background: rgba(42, 75, 124, 220);
            border-radius: 5px;
            border: 1px solid #3A5B8C;
        """)
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.adjust_to_screen()
        self.drag_start_position = QPoint()
        self.original_pos = QPoint()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.checking_active = False
        
        # –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.cursor_cache = {
            'last_check': 0,
            'cursor_visible': False,
            'last_cursor_type': None,
            'cursor_types_found': set()
        }
        
    def setup_qt_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à —á–µ—Ä–µ–∑ QShortcut"""
        try:
            # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞ (–ï/T)
            self.activate_shortcut_e = QShortcut(QKeySequence("–ï"), self)
            self.activate_shortcut_t = QShortcut(QKeySequence("T"), self)
            self.activate_shortcut_e2 = QShortcut(QKeySequence("—Ç"), self)
            self.activate_shortcut_t2 = QShortcut(QKeySequence("e"), self)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.activate_shortcut_e.activated.connect(self.activate_chat_checking)
            self.activate_shortcut_t.activated.connect(self.activate_chat_checking)
            self.activate_shortcut_e2.activated.connect(self.activate_chat_checking)
            self.activate_shortcut_t2.activated.connect(self.activate_chat_checking)
            
            # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ (ESC/Enter)
            self.deactivate_shortcut_esc = QShortcut(QKeySequence("Escape"), self)
            self.deactivate_shortcut_enter = QShortcut(QKeySequence("Return"), self)
            self.deactivate_shortcut_enter2 = QShortcut(QKeySequence("Enter"), self)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é
            self.deactivate_shortcut_esc.activated.connect(self.deactivate_chat_checking)
            self.deactivate_shortcut_enter.activated.connect(self.deactivate_chat_checking)
            self.deactivate_shortcut_enter2.activated.connect(self.deactivate_chat_checking)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            self.debug_shortcut = QShortcut(QKeySequence("Ctrl+Shift+D"), self)
            self.debug_shortcut.activated.connect(self.debug_current_color)
            
            self.debug_cursor_shortcut = QShortcut(QKeySequence("Ctrl+Shift+C"), self)
            self.debug_cursor_shortcut.activated.connect(self.debug_cursor_info)
            
            logging.info("‚úÖ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à: {e}")
    
    def activate_chat_checking(self):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —á–∞—Ç–∞ –ø–æ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–µ –ï/T"""
        if not self.checking_active:
            self.checking_active = True
            self.check_timer.start()
            self.cursor_check_timer.start()
            logging.info("üéØ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê –ü–†–û–í–ï–†–ö–ê –ß–ê–¢–ê (–ï/T)")
            
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            self.flash_window()
            
            # –°—Ä–∞–∑—É –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            self.check_chat_conditions()
    
    def deactivate_chat_checking(self):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —á–∞—Ç–∞ –ø–æ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–µ ESC/Enter"""
        if self.checking_active:
            self.checking_active = False
            self.check_timer.stop()
            self.cursor_check_timer.stop()
            logging.info("‚èπÔ∏è –ü–†–û–í–ï–†–ö–ê –ß–ê–¢–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê (ESC/Enter)")
            
            # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ –≤–∏–¥–∏–º–æ
            if self.isVisible() and not self.mouse_over:
                self.hide()
                logging.info("üì± –û–∫–Ω–æ —á–∞—Ç-–∫–æ–º–∞–Ω–¥ —Å–∫—Ä—ã—Ç–æ")
    
    def flash_window(self):
        """–ú–∏–≥–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            original_style = self.styleSheet()
            self.setStyleSheet("""
                background: rgba(255, 165, 0, 220);
                border-radius: 5px;
                border: 2px solid #FF5722;
            """)
            QTimer.singleShot(200, lambda: self.setStyleSheet(original_style))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥–∞–Ω–∏–∏ –æ–∫–Ω–∞: {e}")
    
    def check_chat_conditions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç-–∫–æ–º–∞–Ω–¥"""
        if not self.checking_active:
            return
            
        try:
            # –ï—Å–ª–∏ –º—ã—à—å –Ω–∞–¥ –æ–∫–Ω–æ–º - –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º
            if self.mouse_over:
                return
                
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫—É—Ä—Å–æ—Ä + –≥–µ–æ–º–µ—Ç—Ä–∏—è + —Ü–≤–µ—Ç
            cursor_detected = self.cursor_cache.get('cursor_visible', False)
            geometry_detected = self.detect_chat_by_geometry()
            color_detected = self.check_chat_zone()
            
            # –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ª—é–±–æ–π –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            chat_opened = cursor_detected or geometry_detected or color_detected
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if hasattr(self, '_last_check_log') and time.time() - self._last_check_log > 3:
                logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫—É—Ä—Å–æ—Ä={cursor_detected}, –≥–µ–æ–º–µ—Ç—Ä–∏—è={geometry_detected}, —Ü–≤–µ—Ç={color_detected}")
                self._last_check_log = time.time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if chat_opened != self.should_be_visible:
                self.should_be_visible = chat_opened
                self.update_visibility()
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_chat_conditions: {e}")
    
    def check_cursor_appearance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞"""
        try:
            current_time = time.time()
            
            # –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
            if current_time - self.cursor_cache['last_check'] < 0.2:
                return
                
            self.cursor_cache['last_check'] = current_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å–æ—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞
            cursor_in_chat_area = self.detect_cursor_in_chat_area()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.cursor_cache['cursor_visible'] = cursor_in_chat_area
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–æ—Ä–∞: {e}")
    
    def detect_cursor_in_chat_area(self):
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä—ã –≤ –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–æ—Ä–µ
            cursor_info = win32gui.GetCursorInfo()
            if not cursor_info:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
            cursor_pos = win32gui.GetCursorPos()
            if not cursor_pos:
                return False
            
            cursor_x, cursor_y = cursor_pos
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ –æ–∂–∏–¥–∞–µ–º–æ–π –ø–æ–∑–∏—Ü–∏–∏ —á–∞—Ç–∞
            chat_x, chat_y = self.chat_detection_coords
            search_width, search_height = 400, 200
            
            left = max(0, chat_x - search_width // 2)
            top = max(0, chat_y - search_height // 2)
            right = left + search_width
            bottom = top + search_height
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞
            cursor_in_area = (left <= cursor_x <= right and top <= cursor_y <= bottom)
            
            if not cursor_in_area:
                return False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∫—É—Ä—Å–æ—Ä–∞
            cursor_handle, cursor_type = cursor_info[1], cursor_info[2]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∫—É—Ä—Å–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if cursor_type not in self.cursor_cache['cursor_types_found']:
                self.cursor_cache['cursor_types_found'].add(cursor_type)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∫—É—Ä—Å–æ—Ä–æ–≤, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            is_input_cursor = self.is_input_cursor_type(cursor_handle, cursor_type)
            
            return is_input_cursor
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞: {e}")
            return False
    
    def is_input_cursor_type(self, cursor_handle, cursor_type):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –∫—É—Ä—Å–æ—Ä–æ–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã –∫—É—Ä—Å–æ—Ä–æ–≤ Windows –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            input_cursor_types = {
                32512,  # IDC_ARROW - –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞
                32513,  # IDC_IBEAM - I-–æ–±—Ä–∞–∑–Ω—ã–π –∫—É—Ä—Å–æ—Ä –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
                32514,  # IDC_WAIT - –∫—É—Ä—Å–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
                32515,  # IDC_CROSS - –∫—Ä–µ—Å—Ç–æ–æ–±—Ä–∞–∑–Ω—ã–π –∫—É—Ä—Å–æ—Ä
                32650,  # IDC_HAND - —Ä—É–∫–∞ (–¥–ª—è —Å—Å—ã–ª–æ–∫)
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É
            if cursor_type in input_cursor_types:
                # –î–ª—è —Å—Ç—Ä–µ–ª–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–Ω
                if cursor_type == 32512:  # IDC_ARROW
                    try:
                        cursor_pos = win32gui.GetCursorPos()
                        pixel_color = pyautogui.pixel(cursor_pos[0], cursor_pos[1])
                        brightness = sum(pixel_color) / 3
                        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç —Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω
                        return brightness > 150
                    except:
                        return False
                return True
                
            return False
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫—É—Ä—Å–æ—Ä–∞: {e}")
            return False

    def detect_chat_by_geometry(self):
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —á–∞—Ç –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º"""
        try:
            x, y = self.chat_detection_coords
            search_width, search_height = 900, 300
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞
            left = max(0, x - search_width // 2)
            top = max(0, y - search_height // 2)
            
            region = (left, top, search_width, search_height)
            screenshot = pyautogui.screenshot(region=region)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
            grayscale = screenshot.convert('L')
            
            # –ò—â–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ (–ø–æ–ª—è –≤–≤–æ–¥–∞ —á–∞—Ç–∞)
            input_fields = self.find_input_fields(grayscale, search_width, search_height)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if hasattr(self, '_last_geometry_log') and time.time() - self._last_geometry_log > 5:
                logging.info(f"üîç –ì–µ–æ–º–µ—Ç—Ä–∏—è: –Ω–∞–π–¥–µ–Ω–æ {input_fields} –ø–æ–ª–µ–π –≤–≤–æ–¥–∞")
                self._last_geometry_log = time.time()
            
            return input_fields >= 1
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏: {e}")
            return False

    def find_input_fields(self, image, width, height):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        pixels = list(image.getdata())
        input_fields = 0
        
        # –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        horizontal_lines = self.detect_horizontal_lines(pixels, width, height)
        vertical_lines = self.detect_vertical_lines(pixels, width, height)
        rectangles = self.detect_rectangles(pixels, width, height)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if horizontal_lines >= 2 and vertical_lines >= 2:
            input_fields += 1
        if rectangles >= 1:
            input_fields += 1
        
        return min(input_fields, 2)

    def detect_horizontal_lines(self, pixels, width, height):
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏"""
        lines_found = 0
        line_threshold = width * 0.4
        
        for y in range(5, height - 5):
            line_length = 0
            max_line_length = 0
            
            for x in range(width):
                idx = y * width + x
                brightness = pixels[idx]
                
                if brightness < 50 or brightness > 200:
                    line_length += 1
                    max_line_length = max(max_line_length, line_length)
                else:
                    line_length = 0
            
            if max_line_length >= line_threshold:
                lines_found += 1
        
        return lines_found

    def detect_vertical_lines(self, pixels, width, height):
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏"""
        lines_found = 0
        line_threshold = height * 0.3
        
        for x in range(5, width - 5):
            line_length = 0
            max_line_length = 0
            
            for y in range(height):
                idx = y * width + x
                brightness = pixels[idx]
                
                if brightness < 50 or brightness > 200:
                    line_length += 1
                    max_line_length = max(max_line_length, line_length)
                else:
                    line_length = 0
            
            if max_line_length >= line_threshold:
                lines_found += 1
        
        return lines_found

    def detect_rectangles(self, pixels, width, height):
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏"""
        rectangles = 0
        
        # –ò—â–µ–º —É–≥–ª—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
        corners = self.find_corners(pixels, width, height)
        
        if corners >= 4:
            rectangles += 1
        
        # –ò—â–µ–º –æ–±–ª–∞—Å—Ç–∏ —Å —Ä–µ–∑–∫–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        bounded_areas = self.find_bounded_areas(pixels, width, height)
        rectangles += bounded_areas
        
        return rectangles

    def find_corners(self, pixels, width, height):
        """–ù–∞—Ö–æ–¥–∏—Ç —É–≥–ª—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤"""
        corners = 0
        
        for y in range(1, height - 1):
            for x in range(1, width - 1):
                idx = y * width + x
                current = pixels[idx]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–µ–π
                left = pixels[idx - 1]
                right = pixels[idx + 1]
                top = pixels[idx - width]
                bottom = pixels[idx + width]
                
                horizontal_contrast = abs(left - right) > 50
                vertical_contrast = abs(top - bottom) > 50
                
                if horizontal_contrast and vertical_contrast:
                    corners += 1
        
        return corners

    def find_bounded_areas(self, pixels, width, height):
        """–ù–∞—Ö–æ–¥–∏—Ç –æ–±–ª–∞—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏"""
        bounded_areas = 0
        
        for y in range(10, height - 10, 20):
            for x in range(10, width - 10, 20):
                if self.is_bounded_area(pixels, width, height, x, y):
                    bounded_areas += 1
        
        return min(bounded_areas, 2)

    def is_bounded_area(self, pixels, width, height, start_x, start_y):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±–ª–∞—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π"""
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        boundaries_found = 0
        
        for dx, dy in directions:
            x, y = start_x, start_y
            boundary_found = False
            
            for _ in range(30):
                x += dx
                y += dy
                
                if x < 0 or x >= width or y < 0 or y >= height:
                    break
                
                idx = y * width + x
                brightness = pixels[idx]
                
                start_idx = start_y * width + start_x
                start_brightness = pixels[start_idx]
                
                if abs(brightness - start_brightness) > 80:
                    boundary_found = True
                    break
            
            if boundary_found:
                boundaries_found += 1
        
        return boundaries_found >= 3

    def check_chat_zone(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—Ç –ø–æ –∑–æ–Ω–µ —Å —É–º–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ü–≤–µ—Ç–∞"""
        try:
            center_x, center_y = self.chat_detection_coords
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω—ã
            half_size = self.zone_size // 2
            left = max(0, center_x - half_size)
            top = max(0, center_y - half_size)
            
            matches_found = 0
            total_checked = 0
            confidence_scores = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–∫–∏ –≤ –∑–æ–Ω–µ
            for x in range(left, left + self.zone_size, self.check_step):
                for y in range(top, top + self.zone_size, self.check_step):
                    try:
                        screenshot = pyautogui.screenshot(region=(x, y, 1, 1))
                        pixel_color = screenshot.getpixel((0, 0))
                        
                        color_match = self.is_color_similar(pixel_color, self.chat_detection_color)
                        
                        if color_match:
                            matches_found += 1
                            confidence = self.calculate_color_confidence(pixel_color, self.chat_detection_color)
                            confidence_scores.append(confidence)
                        
                        total_checked += 1
                        
                    except Exception:
                        continue
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
            if confidence_scores:
                avg_confidence = sum(confidence_scores) / len(confidence_scores)
                dynamic_threshold = max(1, int(self.min_matches_required * (1 - avg_confidence / 100)))
            else:
                dynamic_threshold = self.min_matches_required
            
            result = matches_found >= dynamic_threshold
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if hasattr(self, '_last_debug_log') and time.time() - self._last_debug_log > 2:
                logging.info(f"üîç –ó–æ–Ω–∞ —á–∞—Ç–∞: {matches_found}/{total_checked} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
                self._last_debug_log = time.time()
                
            return result
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–æ–Ω—ã —á–∞—Ç–∞: {e}")
            return False

    def calculate_color_confidence(self, color1, color2):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤"""
        max_deviation = max(abs(c1 - c2) for c1, c2 in zip(color1, color2))
        confidence = max(0, 100 - (max_deviation * 100 / self.chat_color_tolerance))
        return confidence
        
    def is_color_similar(self, color1, color2, tolerance=None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤"""
        if tolerance is None:
            tolerance = self.chat_color_tolerance
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        simple_match = all(abs(c1 - c2) <= tolerance for c1, c2 in zip(color1, color2))
        
        if simple_match:
            return True
        
        # –ï–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance = sum((c1 - c2) ** 2 for c1, c2 in zip(color1, color2)) ** 0.5
        euclidean_match = distance <= (tolerance * 1.7)
        
        # –£—á–µ—Ç —è—Ä–∫–æ—Å—Ç–∏
        brightness1 = sum(color1) / 3
        brightness2 = sum(color2) / 3
        brightness_match = abs(brightness1 - brightness2) <= tolerance
        
        return simple_match or euclidean_match or brightness_match

    def update_visibility(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –æ–∫–Ω–∞"""
        if self.should_be_visible:
            if self.isHidden():
                self.show()
                logging.info("üì± –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —á–∞—Ç-–∫–æ–º–∞–Ω–¥")
        else:
            if self.isVisible() and not self.mouse_over:
                self.hide()
                logging.info("üì± –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç - —Å–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —á–∞—Ç-–∫–æ–º–∞–Ω–¥")
    
    def update_chat_detection_settings(self, coords, color, tolerance=10):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —á–∞—Ç–∞"""
        self.chat_detection_coords = coords
        self.chat_detection_color = color
        self.chat_color_tolerance = tolerance
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞: {coords} - {color}")

    def send_chat_command(self, name, command):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Ç –∫–æ–º–∞–Ω–¥—É –≤ –∏–≥—Ä—É"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            try:
                win32clipboard.OpenClipboard()
                original_clipboard = win32clipboard.GetClipboardData()
            except:
                original_clipboard = ""
            finally:
                win32clipboard.CloseClipboard()

            # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            try:
                win32clipboard.OpenClipboard()
                win32clipboard.EmptyClipboard()
                win32clipboard.SetClipboardText(command, win32con.CF_UNICODETEXT)
            finally:
                win32clipboard.CloseClipboard()

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –æ–∫–Ω–æ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
            time.sleep(0.1)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (Ctrl+V)
            win32api.keybd_event(win32con.VK_CONTROL, 0, 0, 0)
            win32api.keybd_event(ord('V'), 0, 0, 0)
            time.sleep(0.01)
            win32api.keybd_event(ord('V'), 0, win32con.KEYEVENTF_KEYUP, 0)
            win32api.keybd_event(win32con.VK_CONTROL, 0, win32con.KEYEVENTF_KEYUP, 0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É (Enter)
            time.sleep(0.05)
            win32api.keybd_event(win32con.VK_RETURN, 0, 0, 0)
            time.sleep(0.01)
            win32api.keybd_event(win32con.VK_RETURN, 0, win32con.KEYEVENTF_KEYUP, 0)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            try:
                win32clipboard.OpenClipboard()
                win32clipboard.EmptyClipboard()
                win32clipboard.SetClipboardText(original_clipboard)
            finally:
                win32clipboard.CloseClipboard()
            
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
            try:
                win32clipboard.OpenClipboard()
                win32clipboard.EmptyClipboard()
                win32clipboard.SetClipboardText(original_clipboard)
            except:
                pass
            finally:
                win32clipboard.CloseClipboard()

    def update_buttons(self, button_data):
        self.button_data = button_data
        self.create_buttons()

    def reload_buttons(self):
        if self._parent:
            if hasattr(self._parent, 'load_chat_commands'):
                self._parent.load_chat_commands()
                self.update_buttons(self._parent.chat_button_data)

    def enterEvent(self, event):
        """–ú—ã—à—å –≤–æ—à–ª–∞ –≤ –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∂–µ—Ç–∞"""
        self.mouse_over = True
        super().enterEvent(event)

    def leaveEvent(self, event):
        """–ú—ã—à—å –ø–æ–∫–∏–Ω—É–ª–∞ –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∂–µ—Ç–∞"""
        self.mouse_over = False
        super().leaveEvent(event)

    def debug_current_color(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ü–≤–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö"""
        try:
            x, y = self.chat_detection_coords
            
            screenshot = pyautogui.screenshot(region=(x-1, y-1, 3, 3))
            center_color = screenshot.getpixel((1, 1))
            
            logging.info("üé® –¢–ï–ö–£–©–ò–ô –¶–í–ï–¢ –î–õ–Ø –û–¢–õ–ê–î–ö–ò:")
            logging.info(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x}, {y})")
            logging.info(f"üü¶ –¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç: {center_color}")
            logging.info(f"üü• –û–∂–∏–¥–∞–µ–º—ã–π —Ü–≤–µ—Ç: {self.chat_detection_color}")
            logging.info(f"üìè –î–æ–ø—É—Å–∫: {self.chat_color_tolerance}")
            
            color_match = all(
                abs(p - c) <= self.chat_color_tolerance 
                for p, c in zip(center_color, self.chat_detection_color)
            )
            
            logging.info(f"üîç –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {'–î–ê' if color_match else '–ù–ï–¢'}")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ü–≤–µ—Ç–∞: {e}")

    def debug_cursor_info(self):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–æ—Ä–µ"""
        try:
            cursor_info = win32gui.GetCursorInfo()
            cursor_pos = win32gui.GetCursorPos()
            
            chat_x, chat_y = self.chat_detection_coords
            search_width, search_height = 400, 200
            
            in_chat_area = (
                chat_x - search_width//2 <= cursor_pos[0] <= chat_x + search_width//2 and
                chat_y - search_height//2 <= cursor_pos[1] <= chat_y + search_height//2
            )
            
            logging.info("üéØ –û–¢–õ–ê–î–ö–ê –ö–£–†–°–û–†–ê:")
            logging.info(f"üìç –ü–æ–∑–∏—Ü–∏—è: {cursor_pos}")
            logging.info(f"üñ±Ô∏è –¢–∏–ø: {cursor_info[1] if cursor_info else 'N/A'}")
            logging.info(f"üìå –í –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞: {in_chat_area}")
            logging.info(f"üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã: {self.cursor_cache.get('cursor_types_found', set())}")
            
            if in_chat_area and cursor_info:
                try:
                    pixel_color = pyautogui.pixel(cursor_pos[0], cursor_pos[1])
                    brightness = sum(pixel_color) / 3
                    logging.info(f"üé® –¶–≤–µ—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º: {pixel_color}, —è—Ä–∫–æ—Å—Ç—å: {brightness:.1f}")
                except:
                    pass
                    
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –∫—É—Ä—Å–æ—Ä–∞: {e}")

    def force_color_check(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–∞"""
        try:
            logging.info("üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
            
            self.flash_window()
            
            chat_opened = self.check_chat_zone()
            
            self.debug_current_color()
            
            if chat_opened:
                if self.isHidden():
                    self.show()
                    logging.info("üì± –û–∫–Ω–æ —á–∞—Ç-–∫–æ–º–∞–Ω–¥ –ü–û–ö–ê–ó–ê–ù–û")
            else:
                if self.isVisible() and not self.mouse_over:
                    self.hide()
                    logging.info("üì± –û–∫–Ω–æ —á–∞—Ç-–∫–æ–º–∞–Ω–¥ –°–ö–†–´–¢–û")
                    
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.mouse_over = False
        self.check_timer.stop()
        self.cursor_check_timer.stop()
        
        if self._parent and hasattr(self._parent, 'chat_executor_window'):
            self._parent.chat_executor_window = None
        event.accept()

    def setup_ui(self):
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(5, 5, 5, 5)
        main_layout.setSpacing(5)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.container = QWidget()
        self.buttons_layout = QGridLayout(self.container)
        self.buttons_layout.setContentsMargins(5, 5, 5, 5)
        self.buttons_layout.setHorizontalSpacing(10)
        self.buttons_layout.setVerticalSpacing(8)
        
        main_layout.addWidget(self.container)
        
        self.max_rows = 3
        self.create_buttons()
        
    def adjust_to_screen(self):
        """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞"""
        screen = QGuiApplication.primaryScreen().availableGeometry()
        
        width = int(screen.width() * 0.2)
        height = int(screen.height() * 0.15)

        self.setFixedSize(width, height)
        
        left_margin = int(screen.width() * 0.02)
        top_margin = int(screen.height() * 0.62)
        
        self.move(
            screen.left() + left_margin,
            screen.top() + top_margin
        )

    def create_buttons(self):
        # –û—á–∏—â–∞–µ–º layout
        for i in reversed(range(self.buttons_layout.count())): 
            widget = self.buttons_layout.itemAt(i).widget()
            if widget:
                widget.deleteLater()
        
        sorted_buttons = list(self.button_data.items())
        row = 0
        col = 0
        
        for name, data in sorted_buttons:
            btn = QPushButton(name)
            btn.setFixedSize(self.button_width, self.button_height)
            btn.setStyleSheet(f"""
                QPushButton {{
                    background-color: #2A4B7C;
                    color: white;
                    border: 1px solid #3A5B8C;
                    border-radius: 3px;
                    padding: 5px;
                    font-size: 11px;
                    min-width: {self.button_width}px;
                    max-width: {self.button_width}px;
                    min-height: {self.button_height}px;
                    max-height: {self.button_height}px;
                }}
                QPushButton:hover {{
                    background-color: #3A5B9C;
                    border: 1px solid #4A6BAC;
                }}
            """)
            btn.setFocusPolicy(Qt.FocusPolicy.NoFocus)
            
            self.buttons_layout.addWidget(btn, row, col)
            btn.clicked.connect(lambda checked, n=name, d=data["description"]: 
                              self.send_chat_command(n, d))
            
            col += 1
            if col >= len(sorted_buttons) // self.max_rows + 1:
                col = 0
                row += 1
                if row >= self.max_rows:
                    break

    def load_chat_detection_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —á–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if hasattr(self, '_parent') and self._parent and hasattr(self._parent, 'settings_dir'):
                settings_dir = self._parent.settings_dir
            else:
                base_path = Path(__file__).parent.parent
                settings_dir = base_path / "scripts" / "settings"
            
            chat_settings_path = settings_dir / "chat_detection_settings.json"
            
            if chat_settings_path.exists():
                with open(chat_settings_path, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                    
                self.chat_detection_coords = tuple(settings.get('chat_check_coords', (100, 100)))
                self.chat_detection_color = tuple(settings.get('chat_required_color', (68, 80, 95)))
                self.chat_color_tolerance = settings.get('chat_tolerance', 10)
                self.zone_size = settings.get('zone_size', 15)
                self.min_matches_required = settings.get('min_matches_required', 3)
                self.check_step = settings.get('check_step', 3)
                
                logging.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {self.chat_detection_coords}")
            else:
                self.set_default_chat_settings()
                logging.info("‚ö† –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞: {e}")
            self.set_default_chat_settings()
    
    def set_default_chat_settings(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.chat_detection_coords = (100, 100)
        self.chat_detection_color = (68, 80, 95)
        self.chat_color_tolerance = 15
        self.zone_size = 15
        self.min_matches_required = 3
        self.check_step = 3